"use strict";(self.webpackChunkprojects=self.webpackChunkprojects||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"main":[{"type":"link","label":"Spectre System","href":"/docs/base/spectre-system","docId":"base/spectre-system"},{"type":"link","label":"Neutron","href":"/docs/base/neutron","docId":"base/neutron"},{"type":"link","label":"Universal Creator","href":"/docs/base/universal-creator","docId":"base/universal-creator"},{"type":"link","label":"Rei","href":"/docs/base/rei","docId":"base/rei"},{"type":"link","label":"Nova","href":"/docs/base/nova","docId":"base/nova"},{"type":"link","label":"AGVN System","href":"/docs/base/agvn","docId":"base/agvn"}],"research":[{"type":"link","label":"Dynamic Design Theory","href":"/docs/research/dynamic-design-theory","docId":"research/dynamic-design-theory"},{"type":"link","label":"Latency Sensitive Design","href":"/docs/research/latency-sensitive-design","docId":"research/latency-sensitive-design"},{"type":"link","label":"Enlightened Kernel Architecture: Utility, Security, and Performance","href":"/docs/research/kernels-and-utility","docId":"research/kernels-and-utility"},{"type":"link","label":"Instruction Set Architecture from First Principles: Part 1","href":"/docs/research/isa-pt1","docId":"research/isa-pt1"},{"type":"link","label":"Performance Considerations, Pt. 1","href":"/docs/research/performance-post","docId":"research/performance-post"}],"about":[{"type":"link","label":"About Me - Jasen Qin","href":"/docs/about/resume","docId":"about/resume"},{"type":"link","label":"Support Me","href":"/docs/about/support","docId":"about/support"},{"type":"link","label":"Discuss","href":"/docs/about/discuss","docId":"about/discuss"}]},"docs":{"about/discuss":{"id":"about/discuss","title":"Discuss","description":"General Dicussion Forum.","sidebar":"about"},"about/resume":{"id":"about/resume","title":"About Me - Jasen Qin","description":"I am interested in a variety of computer-related technical subjects with years of experience in most popular software suites and development frameworks. I despise soulless work and wish to put all my best into creating a unique and outstanding product.","sidebar":"about"},"about/support":{"id":"about/support","title":"Support Me","description":"If you\'re interested in anything I\'ve got, I\'d love it if you could plege some $$ (and include the description). Theres a bunch of rewards and prototypes at each level of pledging.","sidebar":"about"},"base/agvn":{"id":"base/agvn","title":"AGVN System","description":"Proposal","sidebar":"main"},"base/neutron":{"id":"base/neutron","title":"Neutron","description":"Neutron kernel is a minimalist, strictly neutral kernel. Neutrons stabilize the nucleus, and neutron stabilises the core of the system.","sidebar":"main"},"base/nova":{"id":"base/nova","title":"Nova","description":"Nova","sidebar":"main"},"base/rei":{"id":"base/rei","title":"Rei","description":"Rei is a minimalist programming language built to for optimal systems design. Backward compatibility is not an excuse, and in Rei, many FFIs and legacy APIs and ideals may not even be supported at all.","sidebar":"main"},"base/spectre-system":{"id":"base/spectre-system","title":"Spectre System","description":"Spectre","sidebar":"main"},"base/universal-creator":{"id":"base/universal-creator","title":"Universal Creator","description":"UCreator is a complete additive manufacturing solution. It includes a full SLS 3D printer and a way to fabricate chips*.","sidebar":"main"},"research/dynamic-design-theory":{"id":"research/dynamic-design-theory","title":"Dynamic Design Theory","description":"By Jasen Qin.","sidebar":"research"},"research/isa-pt1":{"id":"research/isa-pt1","title":"Instruction Set Architecture from First Principles: Part 1","description":"Instructions are imperative by default on atomic execution environments. This is probably because digital electronics are ubiquitous and hence most modern atomic instructions are built from discrete signals. If it was built from continuous signals, perhaps we could have something quite different, and not imperative. I think its still possible to have \\"declarative\\" instructions.","sidebar":"research"},"research/kernels-and-utility":{"id":"research/kernels-and-utility","title":"Enlightened Kernel Architecture: Utility, Security, and Performance","description":"Kernels are a key part of a useful computing system. There have been many kernels implemented as a part of a greater system, e.g. an operating system. Such kernels include linux, bsd, nt, sun, dos kernel, etc. These kernels have been developed into their modern counterparts and widely used in GNU/Linux, Android (Google/Linux), Windows, MacOS, FreeBSD, and other smaller embedded systems. Some systems like the Pi may also have a small RTOS based on something like RODOS or ThreadX.","sidebar":"research"},"research/latency-sensitive-design":{"id":"research/latency-sensitive-design","title":"Latency Sensitive Design","description":"By Jasen Qin.","sidebar":"research"},"research/performance-post":{"id":"research/performance-post","title":"Performance Considerations, Pt. 1","description":"What is performance and why do we care?","sidebar":"research"}}}')}}]);