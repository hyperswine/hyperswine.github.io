"use strict";(self.webpackChunkprojects=self.webpackChunkprojects||[]).push([[6360],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var i=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},m=Object.keys(e);for(i=0;i<m.length;i++)n=m[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(i=0;i<m.length;i++)n=m[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var a=i.createContext({}),c=function(e){var t=i.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=c(e.components);return i.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,m=e.originalType,a=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),f=c(n),u=s,d=f["".concat(a,".").concat(u)]||f[u]||p[u]||m;return n?i.createElement(d,r(r({ref:t},l),{},{components:n})):i.createElement(d,r({ref:t},l))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var m=n.length,r=new Array(m);r[0]=f;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var c=2;c<m;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},786:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>m,metadata:()=>o,toc:()=>c});var i=n(7462),s=(n(7294),n(3905));const m={date:new Date("2022-12-17T00:00:00.000Z"),name:"Jasen Qin",title:"Performance Considerations, Pt. 1",url:"https://github.com/hyperswine",email:"jasen.qin33@gmail.com"},r=void 0,o={unversionedId:"research/performance-post",id:"research/performance-post",title:"Performance Considerations, Pt. 1",description:"What is performance and why do we care?",source:"@site/docs/research/performance-post.md",sourceDirName:"research",slug:"/research/performance-post",permalink:"/docs/research/performance-post",draft:!1,tags:[],version:"current",frontMatter:{date:"2022-12-17T00:00:00.000Z",name:"Jasen Qin",title:"Performance Considerations, Pt. 1",url:"https://github.com/hyperswine",email:"jasen.qin33@gmail.com"},sidebar:"research",previous:{title:"Dynamic Design Theory",permalink:"/docs/research/dynamic-design-theory"}},a={},c=[{value:"Benchmarks of software",id:"benchmarks-of-software",level:2}],l={toc:c};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What is performance and why do we care?")),(0,s.kt)("p",null,"That is a great question. Lets attempt to answer that."),(0,s.kt)("h2",{id:"benchmarks-of-software"},"Benchmarks of software"),(0,s.kt)("p",null,"A lot of optimisations can be done in software itself. In my view, 99% of the optimisation should be done in software as a profile for that specific set of hardware. But then again, the code itself should probably be self-optimising in that it scales automatically with the number of execution units and the clock speed of the units."),(0,s.kt)("p",null,"But by far the factor of interest is memory. Everything to do with memory. Whether that be memory bandwidth (and throughput), access speed & latency. A straightforward view of storage would possibly be a strong benefit for all computing applications."),(0,s.kt)("p",null,"I ran this program on rust:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread::sleep;\n\nuse libc::c_void;\n\nmacro_rules! time_function_100 {\n    ($f:expr) => {\n        time_function_n_times($f, 100);\n    };\n}\n\nfn main() {\n    println!("Reading 100 times----\\n\\n");\n    time_function_100!(time_read_to_string);\n    println!("Writing 100 times----\\n\\n");\n    time_function_100!(time_write_to_string);\n}\n\nfn time_function_n_times(func: fn(), n: usize) {\n    for _ in 0..n {\n        // start time\n        let start = std::time::Instant::now();\n\n        // call function\n        func();\n\n        // end time\n        let end = std::time::Instant::now();\n        // difference\n        let diff = end - start;\n\n        sleep(std::time::Duration::from_millis(100));\n\n        println!("time: {diff:?}");\n    }\n}\n\nfn time_read_to_string() {\n    // make a syscall, READ Cargo.toml\n    let _ = std::fs::read_to_string("Cargo.toml");\n}\n\nfn time_write_to_string() {\n    let _ = std::fs::write("test.txt", "hello world");\n}\n')),(0,s.kt)("p",null,"and got these results"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"Reading 100 times----\ntime: 31.042\xb5s\ntime: 70.792\xb5s\ntime: 148.541\xb5s\ntime: 496.125\xb5s\ntime: 170\xb5s\ntime: 179.959\xb5s\ntime: 177\xb5s\ntime: 166.542\xb5s\ntime: 147.75\xb5s\ntime: 111.708\xb5s\ntime: 47.708\xb5s\ntime: 78.167\xb5s\ntime: 76.833\xb5s\ntime: 264.291\xb5s\ntime: 80.917\xb5s\ntime: 144.458\xb5s\ntime: 51.25\xb5s\ntime: 78.917\xb5s\ntime: 54.084\xb5s\ntime: 44.666\xb5s\ntime: 54.084\xb5s\ntime: 58.5\xb5s\ntime: 53.5\xb5s\ntime: 70.458\xb5s\ntime: 58.084\xb5s\ntime: 57.667\xb5s\ntime: 51.458\xb5s\ntime: 66.167\xb5s\ntime: 69\xb5s\ntime: 108.083\xb5s\ntime: 82.084\xb5s\ntime: 97.792\xb5s\ntime: 128.084\xb5s\ntime: 226.708\xb5s\ntime: 129.542\xb5s\ntime: 166.708\xb5s\ntime: 181.75\xb5s\ntime: 174.75\xb5s\ntime: 145.458\xb5s\ntime: 606.25\xb5s\ntime: 97.917\xb5s\ntime: 45.875\xb5s\ntime: 82.625\xb5s\ntime: 109.292\xb5s\ntime: 94.417\xb5s\ntime: 164.458\xb5s\ntime: 174.167\xb5s\ntime: 183.333\xb5s\ntime: 54.125\xb5s\ntime: 82.25\xb5s\ntime: 174.25\xb5s\ntime: 168.5\xb5s\ntime: 192.333\xb5s\ntime: 1.125917ms\ntime: 157.625\xb5s\ntime: 135.625\xb5s\ntime: 92.041\xb5s\ntime: 826.834\xb5s\ntime: 139.042\xb5s\ntime: 42.709\xb5s\ntime: 47.291\xb5s\ntime: 62.583\xb5s\ntime: 90.958\xb5s\ntime: 116.958\xb5s\ntime: 89.667\xb5s\ntime: 442.958\xb5s\ntime: 175.208\xb5s\ntime: 171.834\xb5s\ntime: 60.291\xb5s\ntime: 103.791\xb5s\ntime: 182.333\xb5s\ntime: 101.709\xb5s\ntime: 72.709\xb5s\ntime: 67.541\xb5s\ntime: 67.25\xb5s\ntime: 96.541\xb5s\ntime: 74.834\xb5s\ntime: 95.583\xb5s\ntime: 71.75\xb5s\ntime: 71.083\xb5s\ntime: 67.667\xb5s\ntime: 73.25\xb5s\ntime: 73.959\xb5s\ntime: 47.459\xb5s\ntime: 57.458\xb5s\ntime: 66.125\xb5s\ntime: 70.542\xb5s\ntime: 64.334\xb5s\ntime: 67.833\xb5s\ntime: 173.583\xb5s\ntime: 159.625\xb5s\ntime: 70.583\xb5s\ntime: 146.333\xb5s\ntime: 117.209\xb5s\ntime: 179.959\xb5s\ntime: 83.875\xb5s\ntime: 75.042\xb5s\ntime: 86.959\xb5s\ntime: 94.125\xb5s\ntime: 73.916\xb5s\n\n\nWriting 100 times----\ntime: 1.696292ms\ntime: 401.167\xb5s\ntime: 224.375\xb5s\ntime: 426.791\xb5s\ntime: 651.75\xb5s\ntime: 560\xb5s\ntime: 326.25\xb5s\ntime: 944.333\xb5s\ntime: 276.292\xb5s\ntime: 466.667\xb5s\ntime: 973.958\xb5s\ntime: 413\xb5s\ntime: 670.167\xb5s\ntime: 550.125\xb5s\ntime: 582.208\xb5s\ntime: 617.708\xb5s\ntime: 634.958\xb5s\ntime: 254.375\xb5s\ntime: 528.458\xb5s\ntime: 563.083\xb5s\ntime: 233.666\xb5s\ntime: 332.833\xb5s\ntime: 518.292\xb5s\ntime: 447.25\xb5s\ntime: 547.459\xb5s\ntime: 290.75\xb5s\ntime: 394.75\xb5s\ntime: 653.708\xb5s\ntime: 292.291\xb5s\ntime: 406.542\xb5s\ntime: 525.458\xb5s\ntime: 462.167\xb5s\ntime: 651.541\xb5s\ntime: 578.666\xb5s\ntime: 650.709\xb5s\ntime: 575.917\xb5s\ntime: 398.334\xb5s\ntime: 262.041\xb5s\ntime: 312.208\xb5s\ntime: 534.209\xb5s\ntime: 246.5\xb5s\ntime: 609.125\xb5s\ntime: 373.292\xb5s\ntime: 432.958\xb5s\ntime: 225.25\xb5s\ntime: 274.167\xb5s\ntime: 326.792\xb5s\ntime: 577.083\xb5s\ntime: 430.542\xb5s\ntime: 296.5\xb5s\ntime: 528.791\xb5s\ntime: 600.5\xb5s\ntime: 767.375\xb5s\ntime: 551.667\xb5s\ntime: 401.25\xb5s\ntime: 457.75\xb5s\ntime: 393.042\xb5s\ntime: 650.625\xb5s\ntime: 555.708\xb5s\ntime: 473.833\xb5s\ntime: 753.833\xb5s\ntime: 470.792\xb5s\ntime: 396.708\xb5s\ntime: 367.583\xb5s\ntime: 569.75\xb5s\ntime: 487.625\xb5s\ntime: 726.541\xb5s\ntime: 417.333\xb5s\ntime: 591.209\xb5s\ntime: 645.959\xb5s\ntime: 665.167\xb5s\ntime: 576.708\xb5s\ntime: 395.875\xb5s\ntime: 232.875\xb5s\ntime: 493.042\xb5s\ntime: 251.041\xb5s\ntime: 373.292\xb5s\ntime: 391.125\xb5s\ntime: 1.505916ms\ntime: 394.834\xb5s\ntime: 1.56325ms\ntime: 600.666\xb5s\ntime: 678.542\xb5s\ntime: 414.667\xb5s\ntime: 586.542\xb5s\ntime: 402.708\xb5s\ntime: 287.292\xb5s\ntime: 400.25\xb5s\ntime: 411.791\xb5s\ntime: 531.333\xb5s\ntime: 263.667\xb5s\ntime: 269.25\xb5s\ntime: 197.291\xb5s\ntime: 258.916\xb5s\ntime: 340.333\xb5s\ntime: 237.167\xb5s\ntime: 315\xb5s\ntime: 388.166\xb5s\ntime: 828.458\xb5s\ntime: 272\xb5s\n")),(0,s.kt)("hr",null),(0,s.kt)("h2",{style:{textAlign:"center"}},"Discuss"))}p.isMDXComponent=!0}}]);